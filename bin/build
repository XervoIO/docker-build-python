#!/usr/bin/env bash
set -eo pipefail

if [[ ! $INPUT_DIR ]] || [[ ! $OUTPUT_DIR ]]; then
  echo "Input/Output directory variables must be set."
  exit 1
fi

cp -R /opt/pyenv/. /mnt/home/pyenv

export PATH=$PYENV_ROOT/bin:$PATH

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init -)"

cd $INPUT_DIR

echo "Setting up virtual environment."

VERSION=2.7.10

# if no .python-version file exists, create one
if [[ ! -f $INPUT_DIR/.python-version ]]; then
  # inherit version from app.json
  if [[ $MODULUS_CONFIG_ENGINES_PYTHON ]]; then
    VERSION=$MODULUS_CONFIG_ENGINES_PYTHON
  fi
  pyenv install -s $VERSION > /dev/null 2>&1
  pyenv local $VERSION > /dev/null 2>&1
fi

pyenv install -s > /dev/null 2>&1
pyenv virtualenv app > /dev/null 2>&1
pyenv activate app > /dev/null 2>&1

echo "Installing requirements."
PIP_FLAGS="--exists-action=w --disable-pip-version-check --no-cache-dir"
# install requirements and package
pip install -r requirements.txt $PIP_FLAGS

# install gunicorn
pip install gunicorn $PIP_FLAGS > /dev/null 2>&1

# precompile Django assets
findFile() {
  find $2 -name $1 ! -path "*/node_modules/*" ! -path ".git/*" | \
  awk -F'/' '{print $0 "," NF-1}' | \
  sort -t, -nk2 | \
  awk -F',' '{print $1}' | \
  head -n 1
}

MANAGE_FILE=$(findFile "manage.py" "./")
if [[ -f $MANAGE_FILE ]]; then
  echo "Copying static assets."
  $MANAGE_FILE collectstatic --noinput 2>&1 | sed '/^Copying/d;/^$/d;/^ /d'
fi

mkdir -p $OUTPUT_DIR/.modulus

# copy /opt/pyenv to $OUTPUT_DIR/.modulus/opt/pyenv
cp -R $INPUT_DIR/. $OUTPUT_DIR
cp -R $PYENV_ROOT/. $OUTPUT_DIR/.modulus/pyenv
